package org.idp.wallet.verifiable_credentials_library

import android.content.Context
import androidx.test.core.app.ApplicationProvider
import kotlinx.coroutines.runBlocking
import org.json.JSONArray
import org.junit.Assert
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.robolectric.RobolectricTestRunner

@RunWith(RobolectricTestRunner::class)
class VerifiablePresentationServiceTest {

    private lateinit var context: Context
    private lateinit var service: VerifiablePresentationService

    @Before
    fun setup() {
        context = ApplicationProvider.getApplicationContext()
        service = VerifiablePresentationService(context)
    }

    @Test
    fun testSaveAndFind() {
        runBlocking {
            val url = "openid4vp://?request=eyJhbGciOiJFUzI1NksiLCJraWQiOiJkaWQ6aW9uOkVpQlAyd3RVLUhjcDJ2RGlvRkxqUzBLS1RlR0ZiZUtodVFiV3BIbmN6S3NWSVE6ZXlKa1pXeDBZU0k2ZXlKd1lYUmphR1Z6SWpwYmV5SmhZM1JwYjI0aU9pSnlaWEJzWVdObElpd2laRzlqZFcxbGJuUWlPbnNpY0hWaWJHbGpTMlY1Y3lJNlczc2lhV1FpT2lKemFXZGZaR1ZqT1ROalpUZ2lMQ0p3ZFdKc2FXTkxaWGxLZDJzaU9uc2lZM0oySWpvaWMyVmpjREkxTm1zeElpd2lhM1I1SWpvaVJVTWlMQ0o0SWpvaVMzZFpjRk5IV0ZGbWRWY3RUbGx1TTFSek1FeFFNVkI0Y0MxdU5qTnVjemxETm5CYVdHa3lNRnAyWnlJc0lua2lPaUowUW5WM1IzZE9aalZrYUc1alpqRlhWWGhpTTBsd1FUVnlhbWw2Wm1SWU9VdGpla2wxYjNWTFZrTlpJbjBzSW5CMWNuQnZjMlZ6SWpwYkltRjFkR2hsYm5ScFkyRjBhVzl1SWl3aVlYTnpaWEowYVc5dVRXVjBhRzlrSWwwc0luUjVjR1VpT2lKRlkyUnpZVk5sWTNBeU5UWnJNVlpsY21sbWFXTmhkR2x2Ymt0bGVUSXdNVGtpZlYwc0luTmxjblpwWTJWeklqcGJleUpwWkNJNklteHBibXRsWkdSdmJXRnBibk1pTENKelpYSjJhV05sUlc1a2NHOXBiblFpT25zaWIzSnBaMmx1Y3lJNld5Sm9kSFJ3Y3pvdkwyUnZiV0ZwYmk1amIyMHZJbDE5TENKMGVYQmxJam9pVEdsdWEyVmtSRzl0WVdsdWN5SjlMSHNpYVdRaU9pSm9kV0lpTENKelpYSjJhV05sUlc1a2NHOXBiblFpT25zaWFXNXpkR0Z1WTJWeklqcGJJbWgwZEhCek9pOHZaR1YyTG1oMVlpNXRjMmxrWlc1MGFYUjVMbU52YlM5Mk1TNHdMMlV4WmpZMlpqSmxMV013TlRBdE5ETXdPQzA0TVdJekxUTmtOMlZoTjJWbU0ySXhZaUpkZlN3aWRIbHdaU0k2SWtsa1pXNTBhWFI1U0hWaUluMWRmWDFkTENKMWNHUmhkR1ZEYjIxdGFYUnRaVzUwSWpvaVJXbEVlR3BaTXpCVFprVkRMV1prWWtjeldWWlJObGxIUzNWT1NsZHNORUpYWDBKd1JIRmFkREE0TFhGdGR5SjlMQ0p6ZFdabWFYaEVZWFJoSWpwN0ltUmxiSFJoU0dGemFDSTZJa1ZwUkZwR1NEZDZTekY1TFMwMk1UYzJYM2xUUzJkemVWSlBUM0JwYVhablVIWm1TWGwxUzJrNGJITlpWMmNpTENKeVpXTnZkbVZ5ZVVOdmJXMXBkRzFsYm5RaU9pSkZhVUpHWDFaMlNGWjBlV2t5ZUROVGRHdG5SVVZyVjBnNGRHTmZSVVJaZDFKaFFscHhObDlwTWxsQ1MzTkJJbjE5I3NpZ19kZWM5M2NlOCIsInR5cCI6IkpXVCJ9..mUH238EdWsM2vD3wRby7MYTEQh7OaXFZdudDWhi6twBMQtPpni7MGihUI4Eg-PZWiZokqncclvy2S7suKfXO7w"
            service.handleVpRequest(url)
        }
    }
}